<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大兵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sorrytime.cn/"/>
  <updated>2019-11-27T11:39:45.669Z</updated>
  <id>https://www.sorrytime.cn/</id>
  
  <author>
    <name>Zhibin Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitlab安装配置</title>
    <link href="https://www.sorrytime.cn/2019/11/27/gitlab%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.sorrytime.cn/2019/11/27/gitlab安装配置/</id>
    <published>2019-11-27T06:20:21.000Z</published>
    <updated>2019-11-27T11:39:45.669Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 27 2019 20:27:04 GMT+0800 (China Standard Time) --><blockquote><p><a href="https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-on-ubuntu-16-04/" target="_blank" rel="noopener">https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-on-ubuntu-16-04/</a><br>test</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 27 2019 20:27:04 GMT+0800 (China Standard Time) --&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://www.howtoforge.com/tutorial/how-t
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.sorrytime.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gitlab" scheme="https://www.sorrytime.cn/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解java虚拟机》读书笔记</title>
    <link href="https://www.sorrytime.cn/2019/11/25/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.sorrytime.cn/2019/11/25/《深入理解java虚拟机》读书笔记/</id>
    <published>2019-11-25T15:25:13.000Z</published>
    <updated>2019-11-25T15:25:13.514Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="文章分类" scheme="https://www.sorrytime.cn/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="文章标签" scheme="https://www.sorrytime.cn/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>《交易系统与方法》读书笔记</title>
    <link href="https://www.sorrytime.cn/2019/11/20/%E3%80%8A%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%B9%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.sorrytime.cn/2019/11/20/《交易系统与方法》读书笔记/</id>
    <published>2019-11-20T14:35:19.000Z</published>
    <updated>2019-11-20T15:01:11.954Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="低噪声有益于顺势交易，高噪声有利于均值回归交易"><a href="#低噪声有益于顺势交易，高噪声有利于均值回归交易" class="headerlink" title="低噪声有益于顺势交易，高噪声有利于均值回归交易"></a>低噪声有益于顺势交易，高噪声有利于均值回归交易</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.sorrytime.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="《交易系统与方法》" scheme="https://www.sorrytime.cn/tags/%E3%80%8A%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%96%B9%E6%B3%95%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Effective Java》读书笔记</title>
    <link href="https://www.sorrytime.cn/2019/11/11/%E3%80%8AEffective-Java%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.sorrytime.cn/2019/11/11/《Effective-Java》读书笔记/</id>
    <published>2019-11-11T14:50:14.000Z</published>
    <updated>2019-11-29T13:26:59.784Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 29 2019 21:27:43 GMT+0800 (China Standard Time) --><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="Java-语言支持四种类型"><a href="#Java-语言支持四种类型" class="headerlink" title="Java 语言支持四种类型"></a>Java 语言支持四种类型</h2><ul><li>接口（包括注释）</li><li>类（包括enum）</li><li>数组</li><li>基本类型</li></ul><h1 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h1><h2 id="静态工厂方法代替构造器"><a href="#静态工厂方法代替构造器" class="headerlink" title="静态工厂方法代替构造器"></a>静态工厂方法代替构造器</h2><p><strong>优点：</strong></p><ul><li>静态工厂方法有名称</li><li>不必每次使用的时候都创建一个新对象</li><li>可以返回原类型的任何子类型</li><li>返回的对象的类可以随着每次调用的参数不同而发生变化</li><li>方法返回的对象所属的类，在编写包含静态工厂方法的类时可以不存在</li></ul><p><strong>缺点：</strong></p><ul><li>类如果不含有公有的或者受保护的构造器，就不能被子类化</li><li>程序员很难发现静态工厂方法</li></ul><h2 id="类的构造器具有多个参数时可考虑使用构建器"><a href="#类的构造器具有多个参数时可考虑使用构建器" class="headerlink" title="类的构造器具有多个参数时可考虑使用构建器"></a>类的构造器具有多个参数时可考虑使用构建器</h2><p><strong>建造者模式：</strong> 不直接生成想要的对象，而是让调用者使用必要的参数调用构造器（或者静态工厂），<br>得到一个builder对象，然后客户端在builder对象上调用类似setter的方法，来设置相关参数。最后，<br>使用者调用无参的build方法生成通常是不可变的对像。<br><strong>优点：</strong> 既能保证像重叠构造器模式的安全性，又能有JavaBeans模式的可读性。<br>代码实例，静态类构造器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//Builder Pattern</span><br><span class="line">public class NutritionFacts &#123;</span><br><span class="line">    private final int servingSize;</span><br><span class="line">    private final int servings;</span><br><span class="line">    private final int calories;</span><br><span class="line">    private final int fat;</span><br><span class="line">    private final int sodium;</span><br><span class="line">    private final int carbohydrate;</span><br><span class="line"></span><br><span class="line">    public static class Builder&#123;</span><br><span class="line">        //Required parameters</span><br><span class="line">        private final int servingSize;</span><br><span class="line">        private final int servings;</span><br><span class="line"></span><br><span class="line">        //Optional parameters - initialized to default values</span><br><span class="line">        private int calories = 0;</span><br><span class="line">        private int fat = 0;</span><br><span class="line">        private int sodium = 0;</span><br><span class="line">        private int carbohydrate = 0;</span><br><span class="line">        public Builder(int servingSize,int servings)&#123;</span><br><span class="line">            this.servingSize = servingSize;</span><br><span class="line">            this.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder calories(int val)&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public  Builder fat(int val)&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder sodium(int val)&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder carbohydrate(int val)&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public NutritionFacts build()&#123;</span><br><span class="line">            return new NutritionFacts(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private NutritionFacts(Builder builder)&#123;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//Builder Test</span><br><span class="line">public static void Test_NutritionFacts()&#123;</span><br><span class="line">    NutritionFacts cocaCola = new NutritionFacts.Builder(240,8).calories(100).sodium(35)</span><br><span class="line">            .carbohydrate(27).build();</span><br><span class="line">    System.out.println(cocaCola.GetCalories());</span><br><span class="line">    System.out.println(cocaCola.GetServings());</span><br><span class="line">    System.out.println(cocaCola.GetServingSize());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码实例，使用类层次根部的抽象类表示各式各样的pizza（类层次结构的builder模式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">//Builder pattern for class hierarchies</span><br><span class="line">public class Pizza &#123;</span><br><span class="line">    public enum Topping&#123;HAM, MUSHROOM, ONION, PEPPER, SAUSAGE&#125;</span><br><span class="line">    final Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    // 泛型类，带有一个递归类型参数，和抽象的self方法一样，</span><br><span class="line">    // 允许在子类适当地地方进行方法链接，不需要转换类型</span><br><span class="line">    abstract static class Builder&lt;T extends Builder&lt;T&gt;&gt;&#123;</span><br><span class="line"></span><br><span class="line">        //creating one empty set</span><br><span class="line">        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</span><br><span class="line"></span><br><span class="line">        public T addTopping(Topping topping)&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            return self();</span><br><span class="line">        &#125;</span><br><span class="line">        abstract  Pizza build();</span><br><span class="line"></span><br><span class="line">        // Subclasses must overrite this method to return &quot;this&quot;</span><br><span class="line">        // 针对Java缺乏self类型的解决方案</span><br><span class="line">        protected abstract T self();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Pizza(Builder&lt;?&gt; builder)&#123;</span><br><span class="line">        toppings = builder.toppings.clone(); //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//subclass</span><br><span class="line">public class NyPizza extends Pizza &#123;</span><br><span class="line">    public enum Size &#123; SMALL, MEDIUM, LARGE &#125;</span><br><span class="line">    private final Size size;</span><br><span class="line">    public static class Builder extends Pizza.Builder&lt;Builder&gt;&#123;</span><br><span class="line">        private final Size size;</span><br><span class="line">        public  Builder(Size size)&#123;</span><br><span class="line">            this.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override public NyPizza build()&#123;</span><br><span class="line">            return new NyPizza(this);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override protected Builder self()&#123;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private NyPizza(Builder builder)&#123;</span><br><span class="line">        super(builder);</span><br><span class="line">        size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line">    public Size GetSize()&#123;</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//subclsss</span><br><span class="line">public class Calzone extends Pizza&#123;</span><br><span class="line">    private final boolean sauceInside;</span><br><span class="line"></span><br><span class="line">    public static class Builder extends Pizza.Builder&lt;Builder&gt; &#123;</span><br><span class="line">        private boolean sauceInside = false; //Default</span><br><span class="line"></span><br><span class="line">        public Builder sauceInside()&#123;</span><br><span class="line">            sauceInside = true;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override public Calzone build()&#123;</span><br><span class="line">            return new Calzone(this);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override protected Builder self()&#123;</span><br><span class="line">            return  this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    private Calzone(Builder builder)&#123;</span><br><span class="line">        super(builder);</span><br><span class="line">        sauceInside = builder.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean GetSauce()&#123;</span><br><span class="line">        return this.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Builder Test</span><br><span class="line">public static void Test_Pizza()&#123;</span><br><span class="line">        NyPizza pizza = new NyPizza.Builder(NyPizza.Size.SMALL)</span><br><span class="line">                .addTopping(Pizza.Topping.SAUSAGE).addTopping(Pizza.Topping.ONION).build();</span><br><span class="line">        Calzone calzone = new Calzone.Builder()</span><br><span class="line">                .addTopping(Pizza.Topping.HAM).sauceInside().build();</span><br><span class="line">        System.out.println(pizza.GetSize());</span><br><span class="line">        System.out.println(calzone.GetSauce());  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="用私有构造器或者枚举类型强化Singleton属性"><a href="#用私有构造器或者枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或者枚举类型强化Singleton属性"></a>用私有构造器或者枚举类型强化Singleton属性</h2><p><strong>单例实现的三种方法：</strong></p><h3 id="final类型的公有静态成员"><a href="#final类型的公有静态成员" class="headerlink" title="final类型的公有静态成员"></a>final类型的公有静态成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Singleton with public field</span><br><span class="line">public class Elvis&#123;</span><br><span class="line">    public static final Evis INSTANCE = new Elvis();</span><br><span class="line">    private Elvis()&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    public void leaveTheBuilding() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：特权用户可通过AccessibleObject.setAccessible方法，通过反射机制调用私有构造器。<br>优点：1. 简单；2. 清晰的向用户表达出该类是单例模式。</p></blockquote><h3 id="公有静态成员工厂"><a href="#公有静态成员工厂" class="headerlink" title="公有静态成员工厂"></a>公有静态成员工厂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Singleton with static factory</span><br><span class="line">public class Elvis &#123;</span><br><span class="line">    Private static final Elvis INSTANCE = new Elvis();</span><br><span class="line">    private Elvis() &#123; ... &#125;</span><br><span class="line">    public static Elvis getInstance() &#123; return INSTANCE; &#125;</span><br><span class="line"></span><br><span class="line">    public void leaveTheBuilding() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：1.实现稍复杂；2.具有同上相同风险；<br>优点：1.灵活，不改变接口的情况下，修改器内部实现；2.实现泛型单例工厂；3.通过方法引用提供实例。<br>（以上2种方法实现，排除使用第二种方法优点的情况下，优先使用方法1）</p></blockquote><h3 id="声明单个元素的枚举类型"><a href="#声明单个元素的枚举类型" class="headerlink" title="声明单个元素的枚举类型"></a>声明单个元素的枚举类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Enum singleton - the preferred approach</span><br><span class="line">public enum Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    public void leaveTheBuilding()&#123; ...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：若单例必需扩展一个超类，而不是Enum，则不宜使用该方法；<br>优点：1.更加简洁，无偿提供序列化机制；2.防止任何形式的多次序列化攻击；<br>（单元素的枚举是实现常用单例模式的最佳方法）</p></blockquote><h2 id="优先考虑依赖注入来引用底层资源"><a href="#优先考虑依赖注入来引用底层资源" class="headerlink" title="优先考虑依赖注入来引用底层资源"></a>优先考虑依赖注入来引用底层资源</h2><h2 id="及时消除过期的对象引用，防止内存泄漏"><a href="#及时消除过期的对象引用，防止内存泄漏" class="headerlink" title="及时消除过期的对象引用，防止内存泄漏"></a>及时消除过期的对象引用，防止内存泄漏</h2><h3 id="Stack类易发生内存泄漏"><a href="#Stack类易发生内存泄漏" class="headerlink" title="Stack类易发生内存泄漏"></a>Stack类易发生内存泄漏</h3><blockquote><p>需要主动销毁引用，通过stack[size] = null</p></blockquote><h3 id="缓存易发生内存泄漏"><a href="#缓存易发生内存泄漏" class="headerlink" title="缓存易发生内存泄漏"></a>缓存易发生内存泄漏</h3><blockquote><p>用WeakHashMap代表缓存，当缓存过期会被自动消除；或者使用后台线程定期清理。</p></blockquote><h3 id="监听器和其他回调易发生内存泄漏"><a href="#监听器和其他回调易发生内存泄漏" class="headerlink" title="监听器和其他回调易发生内存泄漏"></a>监听器和其他回调易发生内存泄漏</h3><blockquote><p>回调注册后需要显式的取消注册<br>最佳方法是保存对回调的弱引用（weak reference）</p></blockquote><h2 id="try-with-resources-优先于try-finally用于关闭资源"><a href="#try-with-resources-优先于try-finally用于关闭资源" class="headerlink" title="try-with-resources 优先于try-finally用于关闭资源"></a>try-with-resources 优先于try-finally用于关闭资源</h2><blockquote><p>要使用try-with-resources这个构造资源必需先实现AutoCloseable接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//try-with-resources -the best way to close resources.</span><br><span class="line">static String firstLineOfFile(String path) throws IOException&#123;</span><br><span class="line">    try(BufferedReader br = new BufferedReader(</span><br><span class="line">            new FileReader(path)))&#123;</span><br><span class="line">        return br.readLine();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h1><h2 id="覆盖equals时的通用约定"><a href="#覆盖equals时的通用约定" class="headerlink" title="覆盖equals时的通用约定"></a>覆盖equals时的通用约定</h2><blockquote><p>对称的、传递的和一致的</p></blockquote><h3 id="实现高质量equals方法诀窍"><a href="#实现高质量equals方法诀窍" class="headerlink" title="实现高质量equals方法诀窍"></a>实现高质量equals方法诀窍</h3><ol><li>使用==操作符检查”参数是否为这个对象的引用”，如果是返回true；</li><li>使用instanceof操作符检查 “参数是否为正确的类型，不是返回false”；</li><li>把参数转换成正确的类型；</li><li>对于该类中的每个”关键”域，检查参数中的域是否与该对象中对应的域相匹配，如果匹配怎返回true。<br>实例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//Class with a typical equals method</span><br><span class="line">public final class PhoneNumber &#123;</span><br><span class="line">    private final short areaCode, prefix,lineNum;</span><br><span class="line">    </span><br><span class="line">    public PhoneNumber(int areaCode, int prefix, int lineNum) &#123;</span><br><span class="line">        this.areaCode = rangeCheck(areaCode, 999, &quot;area code&quot;);</span><br><span class="line">        this.prefix = rangeCheck(prefix, 999, &quot;prefix&quot;);</span><br><span class="line">        this.lineNum = rangeCheck(lineNum, 999, &quot;line num&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private static short rangeCheck(int val, int max, String arg)&#123;</span><br><span class="line">        if(val &lt; 0 || val &gt; max)&#123;</span><br><span class="line">            throw new IllegalArgumentException(arg + &quot;:&quot; + val);</span><br><span class="line">        return (short)val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override public boolean equals(Object o)&#123;</span><br><span class="line">        if(o == this)</span><br><span class="line">            return true;</span><br><span class="line">        if(!(o instanceof PhoneNumber))</span><br><span class="line">            return false;</span><br><span class="line">        PhoneNumber pn = (PhoneNumber)o;</span><br><span class="line">        return pn.lineNum == lineNum &amp;&amp; pn.prefix ==prefix &amp;&amp; pn.areacode == areaCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>警告：<br>覆盖equals方法时总要覆盖hashCode；<br>不要企图让equals方法过去智能；<br>不要将equals声明中的Object类替换为其他的类型。<br>Auto Value框架提供了很好的替代方法，可以不必手工编写equals和hashcode方法</p></blockquote><h2 id="始终要覆盖toString"><a href="#始终要覆盖toString" class="headerlink" title="始终要覆盖toString"></a>始终要覆盖toString</h2><h2 id="谨慎覆盖clone方法"><a href="#谨慎覆盖clone方法" class="headerlink" title="谨慎覆盖clone方法"></a>谨慎覆盖clone方法</h2><blockquote><p>对象拷贝应选择提供一个拷贝构造器或者拷贝工厂</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//copy constructor</span><br><span class="line">public Yum（Yum yum）&#123; ... &#125;</span><br><span class="line">//Copy factory</span><br><span class="line">public static Yum newInstance（Yum yum）&#123; ... &#125;</span><br></pre></td></tr></table></figure><h1 id="Comparable接口实现"><a href="#Comparable接口实现" class="headerlink" title="Comparable接口实现"></a>Comparable接口实现</h1><blockquote><p>每档实现一个对排序敏感的类时，都应该让这个类实现Comparable接口。</p></blockquote><h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><h2 id="使类和成员的可访问性最小化"><a href="#使类和成员的可访问性最小化" class="headerlink" title="使类和成员的可访问性最小化"></a>使类和成员的可访问性最小化</h2><h3 id="成员的四种可访问性"><a href="#成员的四种可访问性" class="headerlink" title="成员的四种可访问性"></a>成员的四种可访问性</h3><ol><li>私有的（private），显示声明；</li><li>包级私有（package-private）默认；</li><li>受保护的（protected），显示声明；</li><li>公有的（public）任何地方都可以访问成员。</li></ol><h3 id="让类具有公有的静态final数组域，后者返回这种域的访问方法，是错误的（客户端能够修改数组中的内容）"><a href="#让类具有公有的静态final数组域，后者返回这种域的访问方法，是错误的（客户端能够修改数组中的内容）" class="headerlink" title="让类具有公有的静态final数组域，后者返回这种域的访问方法，是错误的（客户端能够修改数组中的内容）"></a>让类具有公有的静态final数组域，后者返回这种域的访问方法，是错误的（客户端能够修改数组中的内容）</h3><p><strong>解决方法：</strong></p><ol><li><p>使公有数组编程私有的，并增加一个公有的不可变列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static final Thing[] PRIVATE_VALUES = &#123; ... &#125;;</span><br><span class="line">public static final List&lt;Thing&gt; VALUES = </span><br><span class="line">    Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));</span><br></pre></td></tr></table></figure></li><li><p>使数组变成私有的，并添加一个公有方法，返回私有数组的一个拷贝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private static final Thing[] PRIVATE_VALUES = &#123; ... &#125;;</span><br><span class="line">public static final Thing[] values()&#123;</span><br><span class="line">    return PRIVATE_VALUES.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="复合优先于继承"><a href="#复合优先于继承" class="headerlink" title="复合优先于继承"></a>复合优先于继承</h2><h3 id="复合（composition）"><a href="#复合（composition）" class="headerlink" title="复合（composition）"></a>复合（composition）</h3><blockquote><p>不扩展现有的类，而是在新的类中增加一个私有域，现有类变成新类的一个组件使用。</p></blockquote><h3 id="转发（forwarding）"><a href="#转发（forwarding）" class="headerlink" title="转发（forwarding）"></a>转发（forwarding）</h3><blockquote><p>新类中的每个实例方法调用被包含的现有类实例中对应的方法，并返回它的结果，新类中的方法被成为转发方法。</p></blockquote><p>实例（新类和转发类）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//Wrapper class - uses composition in place of inheritance</span><br><span class="line">public class InstrumentedSet&lt;E&gt; extends ForwardingSet&lt;E&gt; &#123;</span><br><span class="line">    private int addCount = 0;</span><br><span class="line">    public InstrumentedSet(Set&lt;E&gt; s)&#123;</span><br><span class="line">        super(s);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override public boolean add(E e)&#123;</span><br><span class="line">        addCount++;</span><br><span class="line">        return super.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override public boolean addAll(Collection&lt;? extends E&gt; c)&#123;</span><br><span class="line">        addCount += c.size();</span><br><span class="line">        return super.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAddCount()&#123;</span><br><span class="line">        return addCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Reusable forwarding class</span><br><span class="line"> public class ForwardingSet&lt;E&gt; implements Set&lt;E&gt; &#123;</span><br><span class="line">    private final Set&lt;E&gt; s;</span><br><span class="line">    public ForwardingSet(Set&lt;E&gt; s)&#123;this.s = s;&#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;s.clear();&#125;</span><br><span class="line">    public boolean contains(Object o)&#123;return s.contains(o);&#125;</span><br><span class="line">    public boolean isEmpty() &#123;return s.isEmpty();&#125;</span><br><span class="line">    public int size() &#123;return s.size()&#125;</span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;return s.iterator();&#125;</span><br><span class="line">    public boolean add(E e) &#123;return s.add(e);&#125;</span><br><span class="line">    public boolean remove(Object o) &#123;return s.remove(o);&#125;</span><br><span class="line">    public boolean containsAll(Collection&lt;?&gt; c)&#123; return s.containsAll(c);&#125;</span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c)&#123; return s.addAll(c);&#125;</span><br><span class="line">    public removeAll(Collection&lt;?&gt; c)&#123;return s.removeAll(c);&#125;</span><br><span class="line">    public retainAll(Collection&lt;?&gt; c)&#123;return s.retainAll(c);&#125;</span><br><span class="line">    public Object[] toArray() &#123;return s.toArray();&#125;</span><br><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;return s.toArray(a);&#125;</span><br><span class="line">    @Override public boolean equeals(Object o)&#123;return s.equals(o);&#125;</span><br><span class="line">    @Override public int hashCode() &#123;return s.hashCode();&#125;</span><br><span class="line">    @Override public String toString() &#123;return s.toString();&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="设计继承类则必需提供详细文档说明，或不使用继承"><a href="#设计继承类则必需提供详细文档说明，或不使用继承" class="headerlink" title="设计继承类则必需提供详细文档说明，或不使用继承"></a>设计继承类则必需提供详细文档说明，或不使用继承</h2><h3 id="为继承而设计的父类，唯一的方法是编写三个及以上的子类"><a href="#为继承而设计的父类，唯一的方法是编写三个及以上的子类" class="headerlink" title="为继承而设计的父类，唯一的方法是编写三个及以上的子类"></a>为继承而设计的父类，唯一的方法是编写三个及以上的子类</h3><h3 id="父类需要遵循的一些约束（消除类中可覆盖方法的自用特性）"><a href="#父类需要遵循的一些约束（消除类中可覆盖方法的自用特性）" class="headerlink" title="父类需要遵循的一些约束（消除类中可覆盖方法的自用特性）"></a>父类需要遵循的一些约束（消除类中可覆盖方法的自用特性）</h3><ul><li>构造器不可调用可被覆盖的方法</li><li>clone和readObject都不能调用可覆盖的方法<h2 id="把不需要子类化的类要禁止子类化"><a href="#把不需要子类化的类要禁止子类化" class="headerlink" title="把不需要子类化的类要禁止子类化"></a>把不需要子类化的类要禁止子类化</h2><h3 id="禁止类子类化的两种方法"><a href="#禁止类子类化的两种方法" class="headerlink" title="禁止类子类化的两种方法"></a>禁止类子类化的两种方法</h3></li><li>方法一 把这个类声明为final</li><li>方法二 把所有构造器都变成私有的，增加一些公有的静态工厂来代替构造器<h2 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h2><h3 id="接口是定义mixin（混合类型）的理想选择，抽象类不能被用于定义mixin"><a href="#接口是定义mixin（混合类型）的理想选择，抽象类不能被用于定义mixin" class="headerlink" title="接口是定义mixin（混合类型）的理想选择，抽象类不能被用于定义mixin"></a>接口是定义mixin（混合类型）的理想选择，抽象类不能被用于定义mixin</h3><h3 id="抽象骨架实现类"><a href="#抽象骨架实现类" class="headerlink" title="抽象骨架实现类"></a>抽象骨架实现类</h3><blockquote><p>接口负责定义类型，及一些缺省方法，骨架实现类负责实现除基本类型接口方法之外，剩下的非基本类型接口方法。<br>扩展骨架实现占了实现接口之外的大部分工作。这就是模版方法模式。<br>如果基本方法和缺省方法覆盖了接口，就不需要骨架实现类了，否则就要编写一个类，声明实现接口，并实现所有剩下的接口方法。<br>该类中可以包含任何非公有的域，以及适合该任务的方法。</p></blockquote></li></ul><p><strong>实例Map.Entry接口：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//Skeletal implementation class</span><br><span class="line">public abstract class AbstractMapEntry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;&#123;</span><br><span class="line">    // Entries in a modifiable map must override this method</span><br><span class="line">    @Override public V setValue(V value)&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    // Implements the general contract of Map.Entry.equals</span><br><span class="line">    @Override public boolean equals(Object o)&#123;</span><br><span class="line">        if (o == this)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!(o instanceof Map.Entry))&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry) o;</span><br><span class="line">        return Objects.equals(e.getKey(), getKey())</span><br><span class="line">            &amp;&amp; Objects.equals(e.getValue(), getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Implements the general contract of Map.Entry.hashCode</span><br><span class="line">    @Override public int hashCode() &#123;</span><br><span class="line">        return Objects.hashCode(getKey())</span><br><span class="line">            ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override public String toString() &#123;</span><br><span class="line">        return getKey() + &quot;=&quot; + getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//该骨架实现不能在Map.Entry接口中实现，也不能作为子接口，**因为不允许缺省方法覆盖Object方法** (Object方法必须被显示覆盖)，</span><br><span class="line">如equals、hashCode和toString</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="尽量消除非受检警告"><a href="#尽量消除非受检警告" class="headerlink" title="尽量消除非受检警告"></a>尽量消除非受检警告</h2><blockquote><p>如果无法消除警告，同时可以证明引起警告的代码是类型安全的，才可以用一个@SuppressWarnings(“unchecked”)<br>注解来禁止这条警告。<br>应该在尽可能小的范围是用SuppressWarnings注解</p></blockquote><h2 id="列表优于数组"><a href="#列表优于数组" class="headerlink" title="列表优于数组"></a>列表优于数组</h2><blockquote><p>数组在运行时检查和强化元素类型；泛型则在编译时强化类型信息，在运行时通过擦除丢失类型信息。</p></blockquote><h2 id="创建具体类型化的泛型数组非法（错误提示或警告），创建无限制通配类型的数组合法"><a href="#创建具体类型化的泛型数组非法（错误提示或警告），创建无限制通配类型的数组合法" class="headerlink" title="创建具体类型化的泛型数组非法（错误提示或警告），创建无限制通配类型的数组合法"></a>创建具体类型化的泛型数组非法（错误提示或警告），创建无限制通配类型的数组合法</h2><blockquote><p>泛型会擦除具体类型，导致不同类型的数组互相可转换，违反类型转换规则。比如string类型泛型数组的元素插入Integer类型泛型数组中。<br>数组和泛型如果放在一起使用得到警告，可尝试用列表代替数组（list）</p></blockquote><h2 id="泛型通配符的PECS（producer-extends，consumer-super）原则"><a href="#泛型通配符的PECS（producer-extends，consumer-super）原则" class="headerlink" title="泛型通配符的PECS（producer-extends，consumer-super）原则"></a>泛型通配符的PECS（producer-extends，consumer-super）原则</h2><h2 id="类型安全的异构容器（实例Favorites）"><a href="#类型安全的异构容器（实例Favorites）" class="headerlink" title="类型安全的异构容器（实例Favorites）"></a>类型安全的异构容器（实例Favorites）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//Typesafe heterogeneous container pattern - implementation</span><br><span class="line">public class Favorites &#123;</span><br><span class="line">    private Map&lt;Class&lt;?&gt;, Object&gt; favorites = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance)&#123;</span><br><span class="line">        favorites.put(Objects.requeireNonNull(type),instance);</span><br><span class="line">    &#125;</span><br><span class="line">    public &lt;T&gt; T getFavorite(Class&lt;T&gt; type)&#123;</span><br><span class="line">        return type.cast(favorites.get(type));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//每个键都有一个不同的参数化类型，比如一个可以是Class&lt;String&gt;,下一个可以是Class&lt;Integer&gt;,</span><br><span class="line">这就是异构。</span><br></pre></td></tr></table></figure><h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><h2 id="用enum代替int常量"><a href="#用enum代替int常量" class="headerlink" title="用enum代替int常量"></a>用enum代替int常量</h2><blockquote><ol><li>int枚举模式不具有类型安全性，enum模式改善了这种缺陷；</li><li>enum枚举允许添加任意的方法和域，并实现任意的接口；</li></ol><p><strong>实例：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//Enum type with data and behavior</span><br><span class="line">public enum Planet &#123;</span><br><span class="line">    MERCURY(3.302e+23, 2.439e6),</span><br><span class="line">    VENUS (4.869e+24, 6.052e6),</span><br><span class="line">    EARTH (5.975e+24, 6.378e6),</span><br><span class="line">    MARS (6.419e+23), 3.393e6);</span><br><span class="line">    </span><br><span class="line">    private final double mass; // In kilograms</span><br><span class="line">    private final double radius; // In meters</span><br><span class="line">    private final double surfacegravity; // In m/s^2</span><br><span class="line">    // Universal gravitational constant in m^3 / kg s^2</span><br><span class="line">    private static final double G = 6.67300E-11;</span><br><span class="line">    // Constructor</span><br><span class="line">    Planet(double mass, double radius)&#123;</span><br><span class="line">        this.mass = mass;</span><br><span class="line">        this.radius = radius;</span><br><span class="line">        surfaceGravity = G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">    public double mass() &#123;return mass;&#125;</span><br><span class="line">    public double radius() &#123;return radius;&#125;</span><br><span class="line">    public double surfaceGravity() &#123;return surfaceGravity;&#125;</span><br><span class="line">    </span><br><span class="line">    public double surfaceWeight(double mass)&#123;</span><br><span class="line">        return mass * surfaceGravity; // F = ma</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//每个枚举变量括号后面的数值就是传递给构造器的参数</span><br><span class="line">public class WeightTable &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        doulbe earthWeight  = Double.parseDouble(args[0]);</span><br><span class="line">        double mass = earthWeight / Planet.EARTH.surfaceGravity();</span><br><span class="line">        for(Planet p: Planet.values())&#123;</span><br><span class="line">            System.out.printf(&quot;Weight on %s is %f%n&quot;, p, p.surfaceWeight(mass));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特定于枚举常量的方法实现"><a href="#特定于枚举常量的方法实现" class="headerlink" title="特定于枚举常量的方法实现"></a>特定于枚举常量的方法实现</h2><blockquote><p>在枚举类型中声明一个抽象的apply方法，并在特定于常量的类主体中，用具体的方法覆盖每个常量的抽象apply方法<br><strong>实例：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Enum type with constant-specific method implementations</span><br><span class="line">public enum Operation&#123;</span><br><span class="line">    PLUS &#123;public double apply(double x, double y) &#123;return x + y;&#125;&#125;,</span><br><span class="line">    MINUS &#123;public double apply(double x, double y) &#123;return x - y;&#125;&#125;,</span><br><span class="line">    TIMES &#123;public double apply(double x, double y)&#123;return x * y;&#125;&#125;,</span><br><span class="line">    DIVIDE &#123;public double apply(double x, double y)&#123;return x / y;&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    public abstract double apply(double x, double y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>枚举常量后可跟相应的符号，并通过覆盖toString方法输出常量对应的符号，如果这样，需要编写一个由常量符号转成<br>常量本身的方法，类似于valueOf</p></blockquote><h2 id="策略枚举"><a href="#策略枚举" class="headerlink" title="策略枚举"></a>策略枚举</h2><blockquote><p>实现 每当添加一个枚举常量时，就强制选择一种加班报酬的策略，可通过策略枚举实现<br><strong>实例：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//The strategy enum pattern</span><br><span class="line">enum PayrollDay &#123;</span><br><span class="line">    MONDAY, TUESDATY, WEDNESDAY, FRIDAY, </span><br><span class="line">    SATURDAY(PayType.WEEKDAY),SUNDAY(PayType.WEEKEND);</span><br><span class="line">    </span><br><span class="line">    private final PayType payType;</span><br><span class="line"></span><br><span class="line">    PayrollDay(PayType payType)&#123;this.payType = payType;&#125;</span><br><span class="line">    PayrollDay() &#123;this(PayType.WEEKDAY);&#125; //Default</span><br><span class="line">    </span><br><span class="line">    int pay(int minutesWorked, int payRate)&#123;</span><br><span class="line">        return payType.pay(minutesWorked, payRate);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //The strategy enum type</span><br><span class="line">    private enum PayType&#123;</span><br><span class="line">        WEEKDAY &#123;</span><br><span class="line">            int overtimePay(int minsWorked, int payRate)&#123;</span><br><span class="line">                return minsWorked &lt;= MINS_PER_SHIFT ? 0 :</span><br><span class="line">                    (minsWorked - MINS_PER_SHIFT) * payRate /2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        WEEKEND&#123;</span><br><span class="line">            int overtimePay(int minsWorked, int payRate)&#123;</span><br><span class="line">                return minsWorked * payRate / 2;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        abstract int overtimePay(int mins, int paRate);</span><br><span class="line">        private static final int MINS_PER_SHIFT = 8 * 60;</span><br><span class="line"></span><br><span class="line">        int pay(int minsWorked, int payRate) &#123;</span><br><span class="line">            int basePay = minsWorked * payRate;</span><br><span class="line">            return basePay + overtimePay(minsWorked, payRate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举索引数组使用EnumMap"><a href="#枚举索引数组使用EnumMap" class="headerlink" title="枚举索引数组使用EnumMap"></a>枚举索引数组使用EnumMap</h2><h2 id="标记接口和标记注解"><a href="#标记接口和标记注解" class="headerlink" title="标记接口和标记注解"></a>标记接口和标记注解</h2><h1 id="Lambda和Stream"><a href="#Lambda和Stream" class="headerlink" title="Lambda和Stream"></a>Lambda和Stream</h1><h2 id="Lambda优先于匿名类"><a href="#Lambda优先于匿名类" class="headerlink" title="Lambda优先于匿名类"></a>Lambda优先于匿名类</h2><p><strong>注意：</strong></p><blockquote><p>Lambda没有名称和文档，一行是理想的，三行是最大极限。<br>Lambda限于函数接口（包括构造函数）<br>不适合抽象类的实例，抽象类实例可通过匿名类完成<br>Lambda中，关键字this是指外围实例（匿名类中，关键字this是指匿名类实例）<br>Lambda是表示小函数对象的最佳方式</p></blockquote><h2 id="方法引用和Lambda哪个简洁用哪个"><a href="#方法引用和Lambda哪个简洁用哪个" class="headerlink" title="方法引用和Lambda哪个简洁用哪个"></a>方法引用和Lambda哪个简洁用哪个</h2><h2 id="stream-谨慎使用"><a href="#stream-谨慎使用" class="headerlink" title="stream 谨慎使用"></a>stream 谨慎使用</h2><blockquote><p>为了正确使用stream，必需了解收集器，重要的收集器工厂是toList、toSet、toMap、groupingBy和joining</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="保护性拷贝"><a href="#保护性拷贝" class="headerlink" title="保护性拷贝"></a>保护性拷贝</h2><blockquote><p>对于参数类型可以被不可信任方子类化的参数，不要使用clone方法进行保护性拷贝，应该使用new<br><strong>实例：</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//defensive copy class</span><br><span class="line">public final class Period&#123;</span><br><span class="line">    private final Date start;</span><br><span class="line">    private final Date end;</span><br><span class="line">    //defensive copies of parameters</span><br><span class="line">    public Period(Date start, Date end)&#123;</span><br><span class="line">        this.start = new Date(start.getTime());</span><br><span class="line">        this.end = new Date(end.getTime());</span><br><span class="line"></span><br><span class="line">        if(this.start.compareTo(this.end)&gt;0)&#123;</span><br><span class="line">            throw new IllegalArgumentException(this.start + &quot; after &quot; + this.end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //defensive copies of internal fields</span><br><span class="line">    public Date start()&#123;</span><br><span class="line">        return new Date(start.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">    public Date end()&#123;</span><br><span class="line">        return new Date(end.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用重载方法"><a href="#慎用重载方法" class="headerlink" title="慎用重载方法"></a>慎用重载方法</h2><blockquote><p>使用重载方法安全保守的策略是，永远不要导出两个具有相同参数数目的重载方法</p></blockquote><h2 id="返回零长度的数组或者集合，而不是null"><a href="#返回零长度的数组或者集合，而不是null" class="headerlink" title="返回零长度的数组或者集合，而不是null"></a>返回零长度的数组或者集合，而不是null</h2><h2 id="Javadoc-生成注释文档"><a href="#Javadoc-生成注释文档" class="headerlink" title="Javadoc 生成注释文档"></a>Javadoc 生成注释文档</h2><h1 id="通用编程"><a href="#通用编程" class="headerlink" title="通用编程"></a>通用编程</h1><h2 id="for-each循环的优势与劣势"><a href="#for-each循环的优势与劣势" class="headerlink" title="for-each循环的优势与劣势"></a>for-each循环的优势与劣势</h2><p>优势：避免混乱和出错<br>劣势：不能用于集合或数组的修改编辑，推荐仅在遍历时使用。</p><h2 id="StringBuilder代替String来存储构造字符串，可提高性能"><a href="#StringBuilder代替String来存储构造字符串，可提高性能" class="headerlink" title="StringBuilder代替String来存储构造字符串，可提高性能"></a>StringBuilder代替String来存储构造字符串，可提高性能</h2><blockquote><p>不要使用字符串连接操作符来合并多个字符串，除非对性能无要求，否则应该使用StringBuilder的append方法。</p></blockquote><h2 id="尽可能使用接口引用对象"><a href="#尽可能使用接口引用对象" class="headerlink" title="尽可能使用接口引用对象"></a>尽可能使用接口引用对象</h2><h2 id="接口优于反射机制"><a href="#接口优于反射机制" class="headerlink" title="接口优于反射机制"></a>接口优于反射机制</h2><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="最常见可重用异常"><a href="#最常见可重用异常" class="headerlink" title="最常见可重用异常"></a>最常见可重用异常</h2><table><thead><tr><th align="left">异常</th><th align="center">使用场合</th></tr></thead><tbody><tr><td align="left">IllegalArgumentException</td><td align="center">非null的参数值不正确</td></tr><tr><td align="left">IllegalStateException</td><td align="center">不适合方法调用的对象对象状态</td></tr><tr><td align="left">NullPointerException</td><td align="center">在禁止使用null的情况下参数值为null</td></tr><tr><td align="left">IndexOutOfBoundsException</td><td align="center">下标参数值越界</td></tr><tr><td align="left">ConcurrenModificationExcetion</td><td align="center">在禁止并发修改的情况，检测到对象的并发修改</td></tr><tr><td align="left">UnsupportedOperationException</td><td align="center">对象不支持用户请求的方法</td></tr></tbody></table><h2 id="方法调用的失败原子性"><a href="#方法调用的失败原子性" class="headerlink" title="方法调用的失败原子性"></a>方法调用的失败原子性</h2><blockquote><p>失败的方法调用应该使对象保持在被调用之前的状态，具有该属性的方法被称为具有失败原子性</p></blockquote><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="Java语言规范保证读或者写一个变量是院子的（atomic），除非这个变量是long或者double类型"><a href="#Java语言规范保证读或者写一个变量是院子的（atomic），除非这个变量是long或者double类型" class="headerlink" title="Java语言规范保证读或者写一个变量是院子的（atomic），除非这个变量是long或者double类型"></a>Java语言规范保证读或者写一个变量是院子的（atomic），除非这个变量是long或者double类型</h2><h2 id="尽量将同步区域内的工作量限制到最少"><a href="#尽量将同步区域内的工作量限制到最少" class="headerlink" title="尽量将同步区域内的工作量限制到最少"></a>尽量将同步区域内的工作量限制到最少</h2><h2 id="executor-task和stream-优先于线程"><a href="#executor-task和stream-优先于线程" class="headerlink" title="executor task和stream 优先于线程"></a>executor task和stream 优先于线程</h2><ul><li>如果编写的是小程序，或者是轻量负载的服务器，使用Executors.newCachedThreadPool是不错的选择</li><li>如果服务器负载重，最好使用Executors.newFixedThreadPool，它提供了一个包含固定线程数目的线程池。</li><li>最大限度的控制，可以使用ThreadPoolExecutor<h2 id="java-util-concurrent-中高级工具分为三类"><a href="#java-util-concurrent-中高级工具分为三类" class="headerlink" title="java.util.concurrent 中高级工具分为三类"></a>java.util.concurrent 中高级工具分为三类</h2></li><li>Executor Framework</li><li>并发集合（Concurrent Collection）</li><li>同步器（Synchronizer）</li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="尽可能使用第三方序列化方法代替Java序列化方法"><a href="#尽可能使用第三方序列化方法代替Java序列化方法" class="headerlink" title="尽可能使用第三方序列化方法代替Java序列化方法"></a>尽可能使用第三方序列化方法代替Java序列化方法</h2><ul><li>Json</li><li>protobuf</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Nov 29 2019 21:27:43 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.sorrytime.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="《Effective Java》" scheme="https://www.sorrytime.cn/tags/%E3%80%8AEffective-Java%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>ipfs 跨域配置</title>
    <link href="https://www.sorrytime.cn/2019/11/02/ipfs-%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.sorrytime.cn/2019/11/02/ipfs-跨域配置/</id>
    <published>2019-11-02T05:50:14.000Z</published>
    <updated>2019-11-02T05:51:47.116Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><p>IPFS启动后的跨域配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &apos;[&quot;http://www.ipfslink.net:9000&quot;, &quot;http://127.0.0.1:5001&quot;, &quot;https://webui.ipfs.io&quot;]&apos;</span><br><span class="line">$ ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &apos;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;]&apos;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;IPFS启动后的跨域配置&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="IPFS" scheme="https://www.sorrytime.cn/categories/IPFS/"/>
    
    
      <category term="跨域配置" scheme="https://www.sorrytime.cn/tags/%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>IPFS 播放器安装</title>
    <link href="https://www.sorrytime.cn/2019/11/01/IPFS-%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>https://www.sorrytime.cn/2019/11/01/IPFS-播放器安装/</id>
    <published>2019-11-01T02:00:29.000Z</published>
    <updated>2019-11-02T05:49:02.095Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><p>安装平台：Ubuntu, 播放器地址：<a href="https://github.com/download13/ipfstube" target="_blank" rel="noopener">https://github.com/download13/ipfstube</a></p><h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p><code>sudo apt-get -y install nginx</code></p><h2 id="安装-letsencrypt"><a href="#安装-letsencrypt" class="headerlink" title="安装 letsencrypt"></a>安装 letsencrypt</h2><p><code>sudo apt-get -y install letsencrypt</code></p><h1 id="安装-Docker、Docker-Compose"><a href="#安装-Docker、Docker-Compose" class="headerlink" title="安装 Docker、Docker Compose"></a>安装 Docker、Docker Compose</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><code>curl -sSL https://get.docker.com/ | sh</code><br><code>service docker start</code></p><h2 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker Compose安装"></a>Docker Compose安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose </span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="端口检查"><a href="#端口检查" class="headerlink" title="端口检查"></a>端口检查</h1><p>为防止80端口冲突，导致安装失败，先卸载掉之前的Nginx。<br><code>apt-get -y remove nginx</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#找到80后的LISTEN xx/yy，xx就是进程号</span><br><span class="line">netstat -lnp|grep 80</span><br><span class="line">#杀掉xx进程</span><br><span class="line">kill -9 xx</span><br></pre></td></tr></table></figure><h1 id="安装-ipfstue"><a href="#安装-ipfstue" class="headerlink" title="安装 ipfstue"></a>安装 ipfstue</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install git</span><br><span class="line">git clone https://github.com/download13/ipfstube.git</span><br><span class="line">cd ipfstube</span><br><span class="line">#编辑nginx.conf文件</span><br><span class="line">nano nginx.conf</span><br></pre></td></tr></table></figure><p>server_name和ssl证书后面的域名改成你的</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><code>docker-compose up -d</code></p><h1 id="修改docker端口映射"><a href="#修改docker端口映射" class="headerlink" title="修改docker端口映射"></a>修改docker端口映射</h1><blockquote><p><a href="https://blog.csdn.net/mazhen1991/article/details/85674209" target="_blank" rel="noopener">https://blog.csdn.net/mazhen1991/article/details/85674209</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;安装平台：Ubuntu, 播放器地址：&lt;a href=&quot;https://github.com/download13/ipfs
      
    
    </summary>
    
    
      <category term="IPFS" scheme="https://www.sorrytime.cn/categories/IPFS/"/>
    
    
      <category term="播放器" scheme="https://www.sorrytime.cn/tags/%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>git 新建远程仓库并初始化</title>
    <link href="https://www.sorrytime.cn/2019/10/21/git-%E6%96%B0%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://www.sorrytime.cn/2019/10/21/git-新建远程仓库并初始化/</id>
    <published>2019-10-21T12:12:36.000Z</published>
    <updated>2019-10-21T12:42:36.292Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><h1 id="新建项目git仓库"><a href="#新建项目git仓库" class="headerlink" title="新建项目git仓库"></a>新建项目git仓库</h1><h2 id="创建git仓库名称和路径，"><a href="#创建git仓库名称和路径，" class="headerlink" title="创建git仓库名称和路径，"></a>创建git仓库名称和路径，</h2><p>假定是/home/git/repro/xxx.git，在/home/git目录下输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir repro</span><br><span class="line">$ chown git:git repro/ //修改repro目录归属</span><br></pre></td></tr></table></figure><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd repo</span><br><span class="line">$ git init --bare xxx.git //初始化远程空仓库，该仓库不允许直接进行git命令操作</span><br><span class="line">$ chown -R git:git xxx.git //仓库所属用户改为git</span><br></pre></td></tr></table></figure><h1 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@ip:/home/git/repro/xxx.git</span><br></pre></td></tr></table></figure><h1 id="通过克隆已有仓库创建新的裸仓库"><a href="#通过克隆已有仓库创建新的裸仓库" class="headerlink" title="通过克隆已有仓库创建新的裸仓库"></a>通过克隆已有仓库创建新的裸仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --bare xxxproject yyyproject.git</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;新建项目git仓库&quot;&gt;&lt;a href=&quot;#新建项目git仓库&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.sorrytime.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="GIT" scheme="https://www.sorrytime.cn/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>http跨域时的options请求详解及解决Go Rest Api 服务跨域问题</title>
    <link href="https://www.sorrytime.cn/2019/10/21/http%E8%B7%A8%E5%9F%9F%E6%97%B6%E7%9A%84options%E8%AF%B7%E6%B1%82%E8%AF%A6%E8%A7%A3%E5%8F%8A%E8%A7%A3%E5%86%B3Go-Rest-Api-%E6%9C%8D%E5%8A%A1%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://www.sorrytime.cn/2019/10/21/http跨域时的options请求详解及解决Go-Rest-Api-服务跨域问题/</id>
    <published>2019-10-21T09:17:15.000Z</published>
    <updated>2019-11-02T05:49:02.096Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><h1 id="什么是options请求"><a href="#什么是options请求" class="headerlink" title="什么是options请求"></a>什么是options请求</h1><pre><code>无论后端还是前端，开发过程中多多少少都会碰到跨域问题，跨域问题中多数会遇到options请求问题。在正式的跨域之前，某些条件下浏览器会根据需要发起一次预检，这就是options请求，用来让服务端返回允许的方法。</code></pre><h1 id="跨域请求类型"><a href="#跨域请求类型" class="headerlink" title="跨域请求类型"></a>跨域请求类型</h1><pre><code>浏览器将跨域请求分为两类，简单请求和非简单请求，简单请求时浏览器不会进行预检，非简单请求时会进行预检。</code></pre><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><pre><code>同时满足以下三个条件的属于简单请求：1. 请求方式只能是： GET、POST、HEAD2. HTTP请求头限制这几种字段：Accept、Accept-Language、Content-Language、Content-Type、Last-Event-ID3. Content-type只能取：application/x-www-form-urlencoded、multipart/form-data、text/plain简单请求，浏览器直接请求，在请求头信息中，增减origin字段，来说明本次请求来源（协议+域名+端口）。服务器根据这个值来决定是否同意请求，服务器返回的响应则会多几个头信息端。</code></pre><h2 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h2><pre><code>是对服务器有特殊要求的请求，比如请求方式是PUT/DELETE,或者Content-Type字段类型是application/json.都会在正式通信之前，通过增加一次HTTP请求预检。向服务器询问当前网页所在域名是否在服务器许可名单，服务器允许后方可进行后续正式请求，否则报错。这时需要后端实现拦截器排除Options请求。</code></pre><h1 id="Golang-Restful-跨域"><a href="#Golang-Restful-跨域" class="headerlink" title="Golang Restful 跨域"></a>Golang Restful 跨域</h1><pre><code>使用Go-Swagger生成的RESTFul后端框架中碰到了跨域Options预检请求问题，通过后端实现拦截器来过滤Options请求。具体实现如下：configure_XXX.go文件中实现以下</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    func setupGlobalMiddleware(handler http.Handler) http.Handler &#123;</span><br><span class="line">        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">            //cros</span><br><span class="line">            w.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)</span><br><span class="line">            w.Header().Set(&quot;Access-Control-Allow-Headers&quot;,&quot;Content-Type,AccessToken,X-CSRF-Token,Authorization,Token&quot;)</span><br><span class="line">            w.Header().Set(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, OPTIONS, PUT, DELETE&quot;)</span><br><span class="line">            w.Header().Set(&quot;Access-Control-Expose-Headers&quot;, &quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type&quot;)</span><br><span class="line">            w.Header().Set(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;)</span><br><span class="line">            method := r.Method</span><br><span class="line">            if method == &quot;OPTIONS&quot; &#123;</span><br><span class="line">                 w.WriteHeader(http.StatusNoContent)</span><br><span class="line">                 return</span><br><span class="line">            &#125;</span><br><span class="line">            //end    </span><br><span class="line">            handler.ServeHTTP(w, r)    </span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;什么是options请求&quot;&gt;&lt;a href=&quot;#什么是options请求&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Web开发" scheme="https://www.sorrytime.cn/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Golang跨域问题" scheme="https://www.sorrytime.cn/tags/Golang%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>IPFS.io 访问设置</title>
    <link href="https://www.sorrytime.cn/2019/10/16/IPFS-io-%E8%AE%BF%E9%97%AE%E8%AE%BE%E7%BD%AE/"/>
    <id>https://www.sorrytime.cn/2019/10/16/IPFS-io-访问设置/</id>
    <published>2019-10-16T01:00:21.000Z</published>
    <updated>2019-10-18T11:01:30.139Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><h1 id="查找主机hosts文件"><a href="#查找主机hosts文件" class="headerlink" title="查找主机hosts文件"></a>查找主机hosts文件</h1><h2 id="Windows-hosts系统文件目录"><a href="#Windows-hosts系统文件目录" class="headerlink" title="Windows hosts系统文件目录"></a>Windows hosts系统文件目录</h2><p>hosts文件一般放在<code>C:\Windows\System32\drivers\etc</code>，如果没有请全盘搜索。</p><h1 id="修改Hosts文件"><a href="#修改Hosts文件" class="headerlink" title="修改Hosts文件"></a>修改Hosts文件</h1><h2 id="windows系统hosts文件修改"><a href="#windows系统hosts文件修改" class="headerlink" title="windows系统hosts文件修改"></a>windows系统hosts文件修改</h2><p>末尾加入以下两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">209.94.78.78        ipfs.io</span><br><span class="line">209.94.90.1         ipfs.io</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;h1 id=&quot;查找主机hosts文件&quot;&gt;&lt;a href=&quot;#查找主机hosts文件&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="IPFS" scheme="https://www.sorrytime.cn/categories/IPFS/"/>
    
    
      <category term="ipfs.io访问设置" scheme="https://www.sorrytime.cn/tags/ipfs-io%E8%AE%BF%E9%97%AE%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>.MD常用语法</title>
    <link href="https://www.sorrytime.cn/2019/10/11/MD%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://www.sorrytime.cn/2019/10/11/MD常用语法/</id>
    <published>2019-10-11T08:54:40.000Z</published>
    <updated>2019-10-21T12:10:51.846Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><p>.md(markdown)是一种快速标记、快速排版语言，目前很多项目的readme都是使用.md文件编写。</p><h1 id="常用符号-‘-gt-’"><a href="#常用符号-‘-gt-’" class="headerlink" title="常用符号 ‘# * - . &gt;’"></a>常用符号 ‘# * - . &gt;’</h1><p>常用符号开头后的空格要注意，空格用于分割标记符合内容。</p><h1 id="标题符号‘-’"><a href="#标题符号‘-’" class="headerlink" title="标题符号‘#’"></a>标题符号‘#’</h1><h2 id="正常标签"><a href="#正常标签" class="headerlink" title="正常标签"></a>正常标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题 </span><br><span class="line">## 二级标题 </span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br></pre></td></tr></table></figure><h2 id="标签闭合"><a href="#标签闭合" class="headerlink" title="标签闭合"></a>标签闭合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题 #</span><br><span class="line">## 二级标题 ##</span><br><span class="line">### 三级标题 ###</span><br><span class="line">#### 四级标题 ####</span><br></pre></td></tr></table></figure><h1 id="列表符号‘-1-’"><a href="#列表符号‘-1-’" class="headerlink" title="列表符号‘+ 1.’"></a>列表符号‘+ 1.’</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ a </span><br><span class="line">+ b </span><br><span class="line">+ c</span><br></pre></td></tr></table></figure><ul><li>a</li><li>b</li><li>c</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. a</span><br><span class="line">2. b</span><br><span class="line">3. c</span><br></pre></td></tr></table></figure><ol><li>a</li><li>b</li><li>c</li></ol><h1 id="引用说明区块-gt"><a href="#引用说明区块-gt" class="headerlink" title="引用说明区块 &gt;"></a>引用说明区块 <code>&gt;</code></h1><p>对内容做一些说明或者引用他人等。</p><h2 id="正常形式"><a href="#正常形式" class="headerlink" title="正常形式"></a>正常形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容</span><br><span class="line">&gt; 说明内容</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>引用内容<br>说明内容</p></blockquote><h2 id="嵌套形式"><a href="#嵌套形式" class="headerlink" title="嵌套形式"></a>嵌套形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1级引用</span><br><span class="line">&gt;&gt; 2级引用</span><br><span class="line">&gt;&gt;&gt; 3级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 4级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 5级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 6级引用</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>1级引用</p><blockquote><p>2级引用</p><blockquote><p>3级引用</p><blockquote><p>4级引用</p><blockquote><p>5级引用</p><blockquote><p>6级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块 `"></a>代码块 <code>`</code></h1><h2 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h2><p><code>`单行代码块`</code></p><p>效果：<br><code>单行代码块</code></p><h2 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h2><blockquote><p>```<br>多行代码<br>多行代码<br>```</p></blockquote><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多行代码块</span><br><span class="line">多行代码块</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>链接文字放在[]中，链接地址放在()中，链接可带title属性，链接地址后空一格，然后把title用引号引起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[myblog](https://blog.bitqts.com &quot;我的博客&quot;),</span><br><span class="line">是一个人原创博客,用于记录和分享学习工作中的问题及心得。</span><br></pre></td></tr></table></figure><p>效果：<br><a href="https://blog.bitqts.com" title="我的博客" target="_blank" rel="noopener">myblog</a>, 是一个人原创博客,用于记录和分享学习工作中的问题及心得。</p><h2 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h2><p>链接文字放在[]中，链接地址放在:后，链接地址后空一格，然后用引号引起来，使用时直接[]引用链接文字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[myblog]是一个人原创博客,用于记录和分享学习工作中的问题及心得。</span><br><span class="line"></span><br><span class="line">[myblog]: https://blog.bitqts.com &quot;我的博客&quot;</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://blog.bitqts.com" title="我的博客" target="_blank" rel="noopener">myblog</a>是一个人原创博客,用于记录和分享学习工作中的问题及心得。</p><h1 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h1><h2 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h2><p>[]前要加上!，图片名放在[]中，图片地址和title放在随后的()中，title前空一格用引号引起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![mylogo](images/me.jpeg &quot;我的logo&quot;)</span><br></pre></td></tr></table></figure><h2 id="参数式-1"><a href="#参数式-1" class="headerlink" title="参数式"></a>参数式</h2><p>图片名放在[]中，图片地址放在:后，title前空一格用引号引起来,引用图片的时候在[]前加上!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![mylogo]</span><br><span class="line">[mylogo]: images/me.jpeg &quot;我的logo&quot;</span><br></pre></td></tr></table></figure><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线由* - _（星号，减号，底线）3个符号中的至少3个重复的符号表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- - -</span><br><span class="line">------</span><br><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">******</span><br><span class="line">___</span><br><span class="line">_ _ _</span><br><span class="line">______</span><br></pre></td></tr></table></figure><h1 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗</strong></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*myblog*    </span><br><span class="line">**myblog**</span><br><span class="line">_myblog_   </span><br><span class="line">__myblog__</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>myblog</em><br><strong>myblog</strong><br><em>myblog</em><br><strong>myblog</strong></p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\\</span><br><span class="line">\*</span><br><span class="line">\+</span><br><span class="line">\-</span><br><span class="line">\`</span><br><span class="line">\_</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure><p>效果：<br><del>删除</del></p><h1 id="表格设置"><a href="#表格设置" class="headerlink" title="表格设置"></a>表格设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|456|456|456|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|def|def|def|</span><br><span class="line">|def|def|def|</span><br><span class="line">|def|def|def|</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">456</th><th align="center">456</th><th align="right">456</th></tr></thead><tbody><tr><td align="left">def</td><td align="center">def</td><td align="right">def</td></tr><tr><td align="left">def</td><td align="center">def</td><td align="right">def</td></tr><tr><td align="left">def</td><td align="center">def</td><td align="right">def</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;.md(markdown)是一种快速标记、快速排版语言，目前很多项目的readme都是使用.md文件编写。&lt;/p&gt;&lt;h1 i
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.sorrytime.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term=".MD语法" scheme="https://www.sorrytime.cn/tags/MD%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《Thinking In Java》读书笔记</title>
    <link href="https://www.sorrytime.cn/2019/10/11/%E3%80%8AThinking-In-Java%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.sorrytime.cn/2019/10/11/《Thinking-In-Java》读书笔记/</id>
    <published>2019-10-11T06:31:13.000Z</published>
    <updated>2019-10-11T11:45:52.746Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.sorrytime.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="《Thinking In Java》" scheme="https://www.sorrytime.cn/tags/%E3%80%8AThinking-In-Java%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-四叉树</title>
    <link href="https://www.sorrytime.cn/2019/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%9B%E5%8F%89%E6%A0%91/"/>
    <id>https://www.sorrytime.cn/2019/10/07/数据结构-四叉树/</id>
    <published>2019-10-07T07:54:51.000Z</published>
    <updated>2019-10-11T11:45:52.747Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://www.sorrytime.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="四叉树" scheme="https://www.sorrytime.cn/tags/%E5%9B%9B%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-单链表</title>
    <link href="https://www.sorrytime.cn/2019/10/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.sorrytime.cn/2019/10/06/数据结构-单链表/</id>
    <published>2019-10-06T12:41:50.000Z</published>
    <updated>2019-11-02T05:49:02.096Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://www.sorrytime.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单链表" scheme="https://www.sorrytime.cn/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用命令</title>
    <link href="https://www.sorrytime.cn/2018/10/06/hexo/"/>
    <id>https://www.sorrytime.cn/2018/10/06/hexo/</id>
    <published>2018-10-06T12:41:50.000Z</published>
    <updated>2019-10-11T11:45:52.746Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/</a></p><p><a href="https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html" target="_blank" rel="noopener">https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.sorrytime.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://www.sorrytime.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>图片测试</title>
    <link href="https://www.sorrytime.cn/2017/10/06/post-name/"/>
    <id>https://www.sorrytime.cn/2017/10/06/post-name/</id>
    <published>2017-10-06T12:41:50.000Z</published>
    <updated>2019-10-11T11:45:52.746Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p><img src="time.jpg" alt="time"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Nov 25 2019 23:26:54 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="测试" scheme="https://www.sorrytime.cn/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://www.sorrytime.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
